const { Client, GatewayIntentBits, SlashCommandBuilder, EmbedBuilder, REST, Routes } = require('discord.js');

const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages]
});

// Commands array
const commands = [
    // Support Ticket Commands
    new SlashCommandBuilder()
        .setName('supportticketeng')
        .setDescription('Display support ticket requirements (English)'),
    
    new SlashCommandBuilder()
        .setName('supportticketdu')
        .setDescription('Display support ticket requirements (German)'),
    
    new SlashCommandBuilder()
        .setName('supportticketfr')
        .setDescription('Display support ticket requirements (French)'),
    
    // HWID Reset Commands
    new SlashCommandBuilder()
        .setName('hwidreseteng')
        .setDescription('Display HWID reset requirements (English)'),
    
    new SlashCommandBuilder()
        .setName('hwidresetdu')
        .setDescription('Display HWID reset requirements (German)'),
    
    new SlashCommandBuilder()
        .setName('hwidresetfr')
        .setDescription('Display HWID reset requirements (French)'),
    
    // HWID Reset Done Commands
    new SlashCommandBuilder()
        .setName('hwidresetdoneeng')
        .setDescription('Notify user that HWID reset has been completed (English)'),
    
    new SlashCommandBuilder()
        .setName('hwidresetdonedu')
        .setDescription('Notify user that HWID reset has been completed (German)'),
    
    new SlashCommandBuilder()
        .setName('hwidresetdonefr')
        .setDescription('Notify user that HWID reset has been completed (French)'),
    
    // Ticket Done Commands
    new SlashCommandBuilder()
        .setName('ticketdoneeng')
        .setDescription('Thank user and notify ticket will be closed shortly (English)'),
    
    new SlashCommandBuilder()
        .setName('ticketdonedu')
        .setDescription('Thank user and notify ticket will be closed shortly (German)'),
    
    new SlashCommandBuilder()
        .setName('ticketdonefr')
        .setDescription('Thank user and notify ticket will be closed shortly (French)'),
    
    // Status Commands
    new SlashCommandBuilder()
        .setName('statuseng')
        .setDescription('Display product status and status page link (English)'),
    
    new SlashCommandBuilder()
        .setName('statusdu')
        .setDescription('Display product status and status page link (German)'),
    
    new SlashCommandBuilder()
        .setName('statusfr')
        .setDescription('Display product status and status page link (French)'),
    
    // Unlocker Help Commands
    new SlashCommandBuilder()
        .setName('unlockerhelpeng')
        .setDescription('Provide unlocker help video and instructions (English)'),
    
    new SlashCommandBuilder()
        .setName('unlockerhelpdu')
        .setDescription('Provide unlocker help video and instructions (German)'),
    
    new SlashCommandBuilder()
        .setName('unlockerhelpfr')
        .setDescription('Provide unlocker help video and instructions (French)'),
    
    // Setup Guide Commands
    new SlashCommandBuilder()
        .setName('setupguideeng')
        .setDescription('Provide setup guide for all products (English)'),
    
    new SlashCommandBuilder()
        .setName('setupguidedu')
        .setDescription('Provide setup guide for all products (German)'),
    
    new SlashCommandBuilder()
        .setName('setupguidefr')
        .setDescription('Provide setup guide for all products (French)'),
    
    // Refund Process Commands
    new SlashCommandBuilder()
        .setName('refundprocesseng')
        .setDescription('Display refund policy and process (English)'),
    
    new SlashCommandBuilder()
        .setName('refundprocessdu')
        .setDescription('Display refund policy and process (German)'),
    
    new SlashCommandBuilder()
        .setName('refundprocessfr')
        .setDescription('Display refund policy and process (French)'),
    
    // All Commands List (Staff Only)
    new SlashCommandBuilder()
        .setName('allcmds')
        .setDescription('Display all available bot commands (Staff Only)')
];

// Register slash commands
const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);

(async () => {
    try {
        console.log('Started refreshing application (/) commands.');

        await rest.put(
            Routes.applicationCommands(process.env.CLIENT_ID),
            { body: commands }
        );

        console.log('Successfully reloaded application (/) commands.');
    } catch (error) {
        console.error(error);
    }
})();

client.once('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
    client.user.setPresence({
        activities: [{ name: 'Helping users', type: 4 }],
        status: 'online'
    });
});

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName } = interaction;

    // Support Ticket Commands
    if (commandName === 'supportticketeng') {
        const supportEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üìã Support Ticket Requirements')
            .setDescription('In order to assist you efficiently, please ensure you provide the following when opening a ticket:')
            .addFields(
                {
                    name: 'üìπ Required Information',
                    value: '‚Ä¢ A clear, high-quality video demonstrating the issue\n‚Ä¢ A screenshot of the error message(s)\n‚Ä¢ The name of the product you are using\n‚Ä¢ The version of Windows you are running\n‚Ä¢ A screenshot of each tab within your Windows Security settings',
                    inline: false
                },
                {
                    name: 'üîß Diagnostic Tool',
                    value: 'Run the following diagnostic setup file and provide a screenshot when prompted:\n[TX Support Tool](https://cdn.discordapp.com/attachments/1413199327249170472/1418206411178901558/TX_Support_Tool.exe)',
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è Important Notes',
                    value: '‚Ä¢ Failure to follow these steps may result in delays or prevent us from providing effective support\n‚Ä¢ Please ensure all requested information is submitted promptly\n‚Ä¢ Once everything is submitted, kindly wait for an administrator to respond\n‚Ä¢ Inactivity within the ticket may result in it being automatically closed',
                    inline: false
                }
            )
            .setFooter({ text: 'Support Team ‚Ä¢ Please follow all requirements' })
            .setTimestamp();

        await interaction.reply({ embeds: [supportEmbed] });
    }

    if (commandName === 'supportticketdu') {
        const supportEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üìã Support-Ticket Anforderungen')
            .setDescription('Um Ihnen effizient zu helfen, stellen Sie bitte beim √ñffnen eines Tickets die folgenden Informationen bereit:')
            .addFields(
                {
                    name: 'üìπ Erforderliche Informationen',
                    value: '‚Ä¢ Ein klares, hochwertiges Video, das das Problem demonstriert\n‚Ä¢ Ein Screenshot der Fehlermeldung(en)\n‚Ä¢ Der Name des Produkts, das Sie verwenden\n‚Ä¢ Die Version von Windows, die Sie verwenden\n‚Ä¢ Ein Screenshot jedes Tabs in Ihren Windows-Sicherheitseinstellungen',
                    inline: false
                },
                {
                    name: 'üîß Diagnose-Tool',
                    value: 'F√ºhren Sie die folgende Diagnose-Datei aus und stellen Sie einen Screenshot bereit:\n[TX Support Tool](https://cdn.discordapp.com/attachments/1413199327249170472/1418206411178901558/TX_Support_Tool.exe)',
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è Wichtige Hinweise',
                    value: '‚Ä¢ Das Nichtbefolgen dieser Schritte kann zu Verz√∂gerungen f√ºhren oder uns daran hindern, effektiven Support zu bieten\n‚Ä¢ Bitte stellen Sie sicher, dass alle angeforderten Informationen umgehend √ºbermittelt werden\n‚Ä¢ Warten Sie nach der √úbermittlung geduldig auf die Antwort eines Administrators\n‚Ä¢ Inaktivit√§t im Ticket kann zur automatischen Schlie√üung f√ºhren',
                    inline: false
                }
            )
            .setFooter({ text: 'Support Team ‚Ä¢ Bitte befolgen Sie alle Anforderungen' })
            .setTimestamp();

        await interaction.reply({ embeds: [supportEmbedDE] });
    }

    if (commandName === 'supportticketfr') {
        const supportEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üìã Exigences du Ticket de Support')
            .setDescription('Afin de vous aider efficacement, veuillez vous assurer de fournir les √©l√©ments suivants lors de l\'ouverture d\'un ticket:')
            .addFields(
                {
                    name: 'üìπ Informations Requises',
                    value: '‚Ä¢ Une vid√©o claire et de haute qualit√© d√©montrant le probl√®me\n‚Ä¢ Une capture d\'√©cran du/des message(s) d\'erreur\n‚Ä¢ Le nom du produit que vous utilisez\n‚Ä¢ La version de Windows que vous utilisez\n‚Ä¢ Une capture d\'√©cran de chaque onglet dans vos param√®tres de s√©curit√© Windows',
                    inline: false
                },
                {
                    name: 'üîß Outil de Diagnostic',
                    value: 'Ex√©cutez le fichier de configuration de diagnostic suivant et fournissez une capture d\'√©cran:\n[TX Support Tool](https://cdn.discordapp.com/attachments/1413199327249170472/1418206411178901558/TX_Support_Tool.exe)',
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è Notes Importantes',
                    value: '‚Ä¢ Ne pas suivre ces √©tapes peut entra√Æner des retards ou nous emp√™cher de fournir un support efficace\n‚Ä¢ Veuillez vous assurer que toutes les informations demand√©es sont soumises rapidement\n‚Ä¢ Une fois tout soumis, veuillez attendre patiemment qu\'un administrateur r√©ponde\n‚Ä¢ L\'inactivit√© dans le ticket peut entra√Æner sa fermeture automatique',
                    inline: false
                }
            )
            .setFooter({ text: '√âquipe de Support ‚Ä¢ Veuillez suivre toutes les exigences' })
            .setTimestamp();

        await interaction.reply({ embeds: [supportEmbedFR] });
    }

    // HWID Reset Commands
    if (commandName === 'hwidreseteng') {
        const hwidEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üîÑ HWID Reset Requirements')
            .setDescription('To assist you with your HWID reset request, please provide the following information:')
            .addFields(
                {
                    name: 'üìÑ Required Documents',
                    value: '‚Ä¢ A clear and detailed image of your invoice ID\n‚Ä¢ A screenshot or photo of your payment confirmation\n‚Ä¢ The email associated with your key\n‚Ä¢ The reason you are requesting a reset',
                    inline: false
                },
                {
                    name: '‚è≥ Processing Time',
                    value: 'Once all required information has been submitted, kindly allow some time for our team to review and respond accordingly.',
                    inline: false
                }
            )
            .setFooter({ text: 'HWID Reset Team ‚Ä¢ All information is required' })
            .setTimestamp();

        await interaction.reply({ embeds: [hwidEmbed] });
    }

    if (commandName === 'hwidresetdu') {
        const hwidEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üîÑ HWID-Reset Anforderungen')
            .setDescription('Um Ihnen bei Ihrer HWID-Reset-Anfrage zu helfen, stellen Sie bitte die folgenden Informationen bereit:')
            .addFields(
                {
                    name: 'üìÑ Erforderliche Dokumente',
                    value: '‚Ä¢ Ein klares und detailliertes Bild Ihrer Rechnungs-ID\n‚Ä¢ Ein Screenshot oder Foto Ihrer Zahlungsbest√§tigung\n‚Ä¢ Die E-Mail, die mit Ihrem Schl√ºssel verkn√ºpft ist\n‚Ä¢ Der Grund f√ºr Ihre Reset-Anfrage',
                    inline: false
                },
                {
                    name: '‚è≥ Bearbeitungszeit',
                    value: 'Sobald alle erforderlichen Informationen √ºbermittelt wurden, gew√§hren Sie unserem Team bitte etwas Zeit zur √úberpr√ºfung und entsprechenden Antwort.',
                    inline: false
                }
            )
            .setFooter({ text: 'HWID-Reset Team ‚Ä¢ Alle Informationen sind erforderlich' })
            .setTimestamp();

        await interaction.reply({ embeds: [hwidEmbedDE] });
    }

    if (commandName === 'hwidresetfr') {
        const hwidEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üîÑ Exigences de R√©initialisation HWID')
            .setDescription('Pour vous aider avec votre demande de r√©initialisation HWID, veuillez fournir les informations suivantes:')
            .addFields(
                {
                    name: 'üìÑ Documents Requis',
                    value: '‚Ä¢ Une image claire et d√©taill√©e de votre ID de facture\n‚Ä¢ Une capture d\'√©cran ou photo de votre confirmation de paiement\n‚Ä¢ L\'e-mail associ√© √† votre cl√©\n‚Ä¢ La raison pour laquelle vous demandez une r√©initialisation',
                    inline: false
                },
                {
                    name: '‚è≥ Temps de Traitement',
                    value: 'Une fois que toutes les informations requises ont √©t√© soumises, veuillez accorder du temps √† notre √©quipe pour examiner et r√©pondre en cons√©quence.',
                    inline: false
                }
            )
            .setFooter({ text: '√âquipe de R√©initialisation HWID ‚Ä¢ Toutes les informations sont requises' })
            .setTimestamp();

        await interaction.reply({ embeds: [hwidEmbedFR] });
    }

    // HWID Reset Done Commands
    if (commandName === 'hwidresetdoneeng') {
        const resetDoneEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('‚úÖ HWID Reset Completed')
            .setDescription('Your HWID reset has been successfully processed and completed.')
            .addFields(
                {
                    name: 'üéØ Status Update',
                    value: 'Your hardware identification has been reset and is now ready for use with your product.',
                    inline: false
                },
                {
                    name: 'üìù Next Steps',
                    value: 'You may now proceed to use your product normally. If you experience any further issues, please don\'t hesitate to create a new support ticket.',
                    inline: false
                }
            )
            .setFooter({ text: 'HWID Reset Team ‚Ä¢ Process Complete' })
            .setTimestamp();

        await interaction.reply({ embeds: [resetDoneEmbed] });
    }

    if (commandName === 'hwidresetdonedu') {
        const resetDoneEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('‚úÖ HWID-Reset Abgeschlossen')
            .setDescription('Ihr HWID-Reset wurde erfolgreich verarbeitet und abgeschlossen.')
            .addFields(
                {
                    name: 'üéØ Status-Update',
                    value: 'Ihre Hardware-Identifikation wurde zur√ºckgesetzt und ist nun f√ºr die Verwendung mit Ihrem Produkt bereit.',
                    inline: false
                },
                {
                    name: 'üìù N√§chste Schritte',
                    value: 'Sie k√∂nnen Ihr Produkt nun normal verwenden. Sollten Sie weitere Probleme haben, erstellen Sie bitte ein neues Support-Ticket.',
                    inline: false
                }
            )
            .setFooter({ text: 'HWID-Reset Team ‚Ä¢ Vorgang Abgeschlossen' })
            .setTimestamp();

        await interaction.reply({ embeds: [resetDoneEmbedDE] });
    }

    if (commandName === 'hwidresetdonefr') {
        const resetDoneEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('‚úÖ R√©initialisation HWID Termin√©e')
            .setDescription('Votre r√©initialisation HWID a √©t√© trait√©e avec succ√®s et termin√©e.')
            .addFields(
                {
                    name: 'üéØ Mise √† jour du Statut',
                    value: 'Votre identification mat√©rielle a √©t√© r√©initialis√©e et est maintenant pr√™te √† √™tre utilis√©e avec votre produit.',
                    inline: false
                },
                {
                    name: 'üìù Prochaines √âtapes',
                    value: 'Vous pouvez maintenant utiliser votre produit normalement. Si vous rencontrez d\'autres probl√®mes, n\'h√©sitez pas √† cr√©er un nouveau ticket de support.',
                    inline: false
                }
            )
            .setFooter({ text: '√âquipe de R√©initialisation HWID ‚Ä¢ Processus Termin√©' })
            .setTimestamp();

        await interaction.reply({ embeds: [resetDoneEmbedFR] });
    }

    // Ticket Done Commands
    if (commandName === 'ticketdoneeng') {
        const ticketDoneEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üéâ Thank You for Your Business')
            .setDescription('Thank you for shopping with us! We appreciate your trust in our services.')
            .addFields(
                {
                    name: 'üîí Ticket Closure',
                    value: 'This support ticket will be closed shortly. If you need further assistance, please feel free to create a new ticket.',
                    inline: false
                },
                {
                    name: '‚≠ê Feedback',
                    value: 'We value your experience with us. Thank you for choosing our services!',
                    inline: false
                }
            )
            .setFooter({ text: 'Support Team ‚Ä¢ Thank you for your business' })
            .setTimestamp();

        await interaction.reply({ embeds: [ticketDoneEmbed] });
    }

    if (commandName === 'ticketdonedu') {
        const ticketDoneEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üéâ Vielen Dank f√ºr Ihr Vertrauen')
            .setDescription('Vielen Dank, dass Sie bei uns eingekauft haben! Wir sch√§tzen Ihr Vertrauen in unsere Dienste.')
            .addFields(
                {
                    name: 'üîí Ticket-Schlie√üung',
                    value: 'Dieses Support-Ticket wird in K√ºrze geschlossen. Wenn Sie weitere Hilfe ben√∂tigen, erstellen Sie gerne ein neues Ticket.',
                    inline: false
                },
                {
                    name: '‚≠ê Feedback',
                    value: 'Wir sch√§tzen Ihre Erfahrung mit uns. Vielen Dank, dass Sie sich f√ºr unsere Dienste entschieden haben!',
                    inline: false
                }
            )
            .setFooter({ text: 'Support Team ‚Ä¢ Vielen Dank f√ºr Ihr Vertrauen' })
            .setTimestamp();

        await interaction.reply({ embeds: [ticketDoneEmbedDE] });
    }

    if (commandName === 'ticketdonefr') {
        const ticketDoneEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üéâ Merci pour Votre Confiance')
            .setDescription('Merci d\'avoir fait vos achats chez nous! Nous appr√©cions votre confiance en nos services.')
            .addFields(
                {
                    name: 'üîí Fermeture du Ticket',
                    value: 'Ce ticket de support sera ferm√© sous peu. Si vous avez besoin d\'une assistance suppl√©mentaire, n\'h√©sitez pas √† cr√©er un nouveau ticket.',
                    inline: false
                },
                {
                    name: '‚≠ê Commentaires',
                    value: 'Nous valorisons votre exp√©rience avec nous. Merci d\'avoir choisi nos services!',
                    inline: false
                }
            )
            .setFooter({ text: '√âquipe de Support ‚Ä¢ Merci pour votre confiance' })
            .setTimestamp();

        await interaction.reply({ embeds: [ticketDoneEmbedFR] });
    }

    // Status Commands
    if (commandName === 'statuseng') {
        const statusEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üìä Product Status')
            .setDescription('Check the current status of all our products and services.')
            .addFields(
                {
                    name: 'üîó Status Page',
                    value: '[View Live Status](https://dottyservices.online/status)\nMonitor real-time status updates for all products',
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è Important Notice',
                    value: 'Always check the status page before using any products to ensure optimal performance and avoid potential issues.',
                    inline: false
                }
            )
            .setFooter({ text: 'Status Team ‚Ä¢ Always check before use' })
            .setTimestamp();

        await interaction.reply({ embeds: [statusEmbed] });
    }

    if (commandName === 'statusdu') {
        const statusEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üìä Produktstatus')
            .setDescription('√úberpr√ºfen Sie den aktuellen Status aller unserer Produkte und Dienstleistungen.')
            .addFields(
                {
                    name: 'üîó Status-Seite',
                    value: '[Live-Status anzeigen](https://dottyservices.online/status)\n√úberwachen Sie Echtzeit-Status-Updates f√ºr alle Produkte',
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è Wichtiger Hinweis',
                    value: '√úberpr√ºfen Sie immer die Status-Seite vor der Verwendung von Produkten, um optimale Leistung zu gew√§hrleisten und potenzielle Probleme zu vermeiden.',
                    inline: false
                }
            )
            .setFooter({ text: 'Status Team ‚Ä¢ Immer vor Gebrauch pr√ºfen' })
            .setTimestamp();

        await interaction.reply({ embeds: [statusEmbedDE] });
    }

    if (commandName === 'statusfr') {
        const statusEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üìä Statut des Produits')
            .setDescription('V√©rifiez le statut actuel de tous nos produits et services.')
            .addFields(
                {
                    name: 'üîó Page de Statut',
                    value: '[Voir le Statut en Direct](https://dottyservices.online/status)\nSurveiller les mises √† jour de statut en temps r√©el pour tous les produits',
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è Avis Important',
                    value: 'V√©rifiez toujours la page de statut avant d\'utiliser des produits pour assurer des performances optimales et √©viter des probl√®mes potentiels.',
                    inline: false
                }
            )
            .setFooter({ text: '√âquipe de Statut ‚Ä¢ Toujours v√©rifier avant utilisation' })
            .setTimestamp();

        await interaction.reply({ embeds: [statusEmbedFR] });
    }

    // Unlocker Help Commands
    if (commandName === 'unlockerhelpeng') {
        const unlockerEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üîì Unlocker Help Guide')
            .setDescription('Need help with the unlocker? Follow our comprehensive video guide.')
            .addFields(
                {
                    name: 'üé• Video Tutorial',
                    value: '[Watch Help Video](https://streamable.com/zn260n)\nStep-by-step instructions for unlocker usage',
                    inline: false
                },
                {
                    name: 'üìã Instructions',
                    value: 'Please follow the video tutorial carefully for proper unlocker setup and usage. The video covers all essential steps.',
                    inline: false
                }
            )
            .setFooter({ text: 'Unlocker Support ‚Ä¢ Follow the video guide' })
            .setTimestamp();

        await interaction.reply({ embeds: [unlockerEmbed] });
    }

    if (commandName === 'unlockerhelpdu') {
        const unlockerEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üîì Unlocker-Hilfe-Leitfaden')
            .setDescription('Ben√∂tigen Sie Hilfe mit dem Unlocker? Folgen Sie unserem umfassenden Video-Leitfaden.')
            .addFields(
                {
                    name: 'üé• Video-Tutorial',
                    value: '[Hilfe-Video ansehen](https://streamable.com/zn260n)\nSchritt-f√ºr-Schritt-Anleitung f√ºr die Unlocker-Nutzung',
                    inline: false
                },
                {
                    name: 'üìã Anweisungen',
                    value: 'Bitte folgen Sie dem Video-Tutorial sorgf√§ltig f√ºr die ordnungsgem√§√üe Unlocker-Einrichtung und -Nutzung. Das Video deckt alle wesentlichen Schritte ab.',
                    inline: false
                }
            )
            .setFooter({ text: 'Unlocker-Support ‚Ä¢ Folgen Sie der Video-Anleitung' })
            .setTimestamp();

        await interaction.reply({ embeds: [unlockerEmbedDE] });
    }

    if (commandName === 'unlockerhelpfr') {
        const unlockerEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üîì Guide d\'Aide Unlocker')
            .setDescription('Besoin d\'aide avec l\'unlocker? Suivez notre guide vid√©o complet.')
            .addFields(
                {
                    name: 'üé• Tutoriel Vid√©o',
                    value: '[Regarder la Vid√©o d\'Aide](https://streamable.com/zn260n)\nInstructions √©tape par √©tape pour l\'utilisation de l\'unlocker',
                    inline: false
                },
                {
                    name: 'üìã Instructions',
                    value: 'Veuillez suivre attentivement le tutoriel vid√©o pour une configuration et utilisation appropri√©e de l\'unlocker. La vid√©o couvre toutes les √©tapes essentielles.',
                    inline: false
                }
            )
            .setFooter({ text: 'Support Unlocker ‚Ä¢ Suivez le guide vid√©o' })
            .setTimestamp();

        await interaction.reply({ embeds: [unlockerEmbedFR] });
    }

    // Setup Guide Commands
    if (commandName === 'setupguideeng') {
        const setupEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('‚öôÔ∏è Product Setup Guide')
            .setDescription('Complete setup guide for all our products and services.')
            .addFields(
                {
                    name: 'üìñ Setup Documentation',
                    value: '[View Setup Guide](https://dottyservices.online/setup)\nComprehensive setup instructions for all products',
                    inline: false
                },
                {
                    name: 'üîß Installation Help',
                    value: 'Follow the setup guide carefully for proper installation and configuration of your products.',
                    inline: false
                }
            )
            .setFooter({ text: 'Setup Team ‚Ä¢ Follow the complete guide' })
            .setTimestamp();

        await interaction.reply({ embeds: [setupEmbed] });
    }

    if (commandName === 'setupguidedu') {
        const setupEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('‚öôÔ∏è Produkt-Setup-Leitfaden')
            .setDescription('Vollst√§ndiger Setup-Leitfaden f√ºr alle unsere Produkte und Dienstleistungen.')
            .addFields(
                {
                    name: 'üìñ Setup-Dokumentation',
                    value: '[Setup-Leitfaden anzeigen](https://dottyservices.online/setup)\nUmfassende Setup-Anweisungen f√ºr alle Produkte',
                    inline: false
                },
                {
                    name: 'üîß Installationshilfe',
                    value: 'Folgen Sie dem Setup-Leitfaden sorgf√§ltig f√ºr die ordnungsgem√§√üe Installation und Konfiguration Ihrer Produkte.',
                    inline: false
                }
            )
            .setFooter({ text: 'Setup Team ‚Ä¢ Folgen Sie dem vollst√§ndigen Leitfaden' })
            .setTimestamp();

        await interaction.reply({ embeds: [setupEmbedDE] });
    }

    if (commandName === 'setupguidefr') {
        const setupEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('‚öôÔ∏è Guide de Configuration des Produits')
            .setDescription('Guide de configuration complet pour tous nos produits et services.')
            .addFields(
                {
                    name: 'üìñ Documentation de Configuration',
                    value: '[Voir le Guide de Configuration](https://dottyservices.online/setup)\nInstructions de configuration compl√®tes pour tous les produits',
                    inline: false
                },
                {
                    name: 'üîß Aide √† l\'Installation',
                    value: 'Suivez attentivement le guide de configuration pour une installation et configuration appropri√©e de vos produits.',
                    inline: false
                }
            )
            .setFooter({ text: '√âquipe de Configuration ‚Ä¢ Suivez le guide complet' })
            .setTimestamp();

        await interaction.reply({ embeds: [setupEmbedFR] });
    }

    // Refund Process Commands
    if (commandName === 'refundprocesseng') {
        const refundEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üí∞ Refund Policy & Process')
            .setDescription('Our refund policy in accordance with EU and German consumer protection laws.')
            .addFields(
                {
                    name: '‚úÖ Eligibility for Refunds',
                    value: '‚Ä¢ Digital content not delivered due to technical issues on our side\n‚Ä¢ Product is unusable due to technical problems from our end\n‚Ä¢ Must be requested within 14 days of purchase',
                    inline: false
                },
                {
                    name: '‚ùå Refund Limitations',
                    value: '‚Ä¢ Refunds are not guaranteed if the product has been accessed, downloaded, or used successfully\n‚Ä¢ Must comply with EU Directive 2011/83/EU on Consumer Rights',
                    inline: false
                },
                {
                    name: 'üìß How to Request',
                    value: 'Contact us at: dottywotty1234@outlook.com\nInclude your purchase details and reason for refund request',
                    inline: false
                }
            )
            .setFooter({ text: 'Refund Team ‚Ä¢ EU Consumer Rights Protected' })
            .setTimestamp();

        await interaction.reply({ embeds: [refundEmbed] });
    }

    if (commandName === 'refundprocessdu') {
        const refundEmbedDE = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üí∞ R√ºckerstattungsrichtlinie & Verfahren')
            .setDescription('Unsere R√ºckerstattungsrichtlinie in √úbereinstimmung mit EU- und deutschen Verbraucherschutzgesetzen.')
            .addFields(
                {
                    name: '‚úÖ Berechtigung f√ºr R√ºckerstattungen',
                    value: '‚Ä¢ Digitale Inhalte nicht geliefert aufgrund technischer Probleme unsererseits\n‚Ä¢ Produkt ist aufgrund technischer Probleme von unserer Seite unbrauchbar\n‚Ä¢ Muss innerhalb von 14 Tagen nach dem Kauf beantragt werden',
                    inline: false
                },
                {
                    name: '‚ùå R√ºckerstattungsbeschr√§nkungen',
                    value: '‚Ä¢ R√ºckerstattungen sind nicht garantiert, wenn das Produkt bereits aufgerufen, heruntergeladen oder erfolgreich verwendet wurde\n‚Ä¢ Muss der EU-Richtlinie 2011/83/EU √ºber Verbraucherrechte entsprechen',
                    inline: false
                },
                {
                    name: 'üìß Wie man anfragt',
                    value: 'Kontaktieren Sie uns unter: dottywotty1234@outlook.com\nF√ºgen Sie Ihre Kaufdetails und den Grund f√ºr die R√ºckerstattungsanfrage bei',
                    inline: false
                }
            )
            .setFooter({ text: 'R√ºckerstattungsteam ‚Ä¢ EU-Verbraucherrechte gesch√ºtzt' })
            .setTimestamp();

        await interaction.reply({ embeds: [refundEmbedDE] });
    }

    if (commandName === 'refundprocessfr') {
        const refundEmbedFR = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('üí∞ Politique de Remboursement & Processus')
            .setDescription('Notre politique de remboursement conforme aux lois de protection des consommateurs de l\'UE et d\'Allemagne.')
            .addFields(
                {
                    name: '‚úÖ √âligibilit√© aux Remboursements',
                    value: '‚Ä¢ Contenu num√©rique non livr√© en raison de probl√®mes techniques de notre c√¥t√©\n‚Ä¢ Produit inutilisable en raison de probl√®mes techniques de notre c√¥t√©\n‚Ä¢ Doit √™tre demand√© dans les 14 jours suivant l\'achat',
                    inline: false
                },
                {
                    name: '‚ùå Limitations de Remboursement',
                    value: '‚Ä¢ Les remboursements ne sont pas garantis si le produit a √©t√© consult√©, t√©l√©charg√© ou utilis√© avec succ√®s\n‚Ä¢ Doit √™tre conforme √† la Directive UE 2011/83/UE sur les droits des consommateurs',
                    inline: false
                },
                {
                    name: 'üìß Comment Demander',
                    value: 'Contactez-nous √†: dottywotty1234@outlook.com\nIncluez vos d√©tails d\'achat et la raison de la demande de remboursement',
                    inline: false
                }
            )
            .setFooter({ text: '√âquipe de Remboursement ‚Ä¢ Droits des Consommateurs UE Prot√©g√©s' })
            .setTimestamp();

        await interaction.reply({ embeds: [refundEmbedFR] });
    }

    // All Commands List (Staff Only)
    if (commandName === 'allcmds') {
        const allCmdsEmbed = new EmbedBuilder()
            .setColor('#FFFFFF')
            .setTitle('ü§ñ All Bot Commands')
            .setDescription('Complete list of available bot commands for support staff.')
            .addFields(
                {
                    name: 'üìã Support Ticket Commands',
                    value: '`/supportticketeng` - Support requirements (English)\n`/supportticketdu` - Support requirements (German)\n`/supportticketfr` - Support requirements (French)',
                    inline: false
                },
                {
                    name: 'üîÑ HWID Reset Commands',
                    value: '`/hwidreseteng` - HWID reset requirements (English)\n`/hwidresetdu` - HWID reset requirements (German)\n`/hwidresetfr` - HWID reset requirements (French)',
                    inline: false
                },
                {
                    name: '‚úÖ HWID Reset Done Commands',
                    value: '`/hwidresetdoneeng` - Notify reset complete (English)\n`/hwidresetdonedu` - Notify reset complete (German)\n`/hwidresetdonefr` - Notify reset complete (French)',
                    inline: false
                },
                {
                    name: 'üéâ Ticket Done Commands',
                    value: '`/ticketdoneeng` - Thank user & close ticket (English)\n`/ticketdonedu` - Thank user & close ticket (German)\n`/ticketdonefr` - Thank user & close ticket (French)',
                    inline: false
                },
                {
                    name: 'üìä Status Commands',
                    value: '`/statuseng` - Product status page (English)\n`/statusdu` - Product status page (German)\n`/statusfr` - Product status page (French)',
                    inline: false
                },
                {
                    name: 'üîì Unlocker Help Commands',
                    value: '`/unlockerhelpeng` - Unlocker video guide (English)\n`/unlockerhelpdu` - Unlocker video guide (German)\n`/unlockerhelpfr` - Unlocker video guide (French)',
                    inline: false
                },
                {
                    name: '‚öôÔ∏è Setup Guide Commands',
                    value: '`/setupguideeng` - Product setup guide (English)\n`/setupguidedu` - Product setup guide (German)\n`/setupguidefr` - Product setup guide (French)',
                    inline: false
                },
                {
                    name: 'üí∞ Refund Process Commands',
                    value: '`/refundprocesseng` - Refund policy & process (English)\n`/refundprocessdu` - Refund policy & process (German)\n`/refundprocessfr` - Refund policy & process (French)',
                    inline: false
                },
                {
                    name: 'üìù Staff Commands',
                    value: '`/allcmds` - Display all commands (Staff Only)',
                    inline: false
                }
            )
            .setFooter({ text: 'Bot Commands ‚Ä¢ Total: 25 Commands' })
            .setTimestamp();

        await interaction.reply({ embeds: [allCmdsEmbed] });
    }
});

client.login(process.env.DISCORD_TOKEN);
